---
layout: post
title:  "数学：算法设计与分析"
date:   2017-11-26 7:1:32 +0800
categories: jekyll update
---

詹令   
lealzhan@126.com    
2017.11.26   

# Contents
{:.no_toc}

* Will be replaced with the ToC, excluding the "Contents" header
{:toc}



## 算法设计

常见的算法设计策略

### Divide and Conquer 分治法

**递归**
递归是分治法实现的一个方式。

**分治法的核心思想**
将一个难以直接解决的大问题分解成一些规模较小的相同问题，而且这些问题相互独立，以便各个击破，分而治之。

**解题步骤** 
分治法在每一层递归上都有3个解题步骤    
（1）分解。 将原问题分解成一系列子问题。   
（2）求解。 递归的求解各个子问题。若子问题足够小，则直接求解。   
（3）合并。将子问题的解合并成原问题的解。   

#### 实例
##### Merge Sort


##### Quick Sort


### Dynamic Programming 动态规划
?
常用于解决最优化问题。

- 适用贪心算法解决的问题的两个重要性质：
	- 最优子结构。
	- 子问题重叠。


#### 实例
##### 0-1 背包问题



### Greedy 贪心算法
- 常用于解决最优化问题。   
- 每步都选择局部最优：仅根据当前已有信息做出选择，而且一旦做出选择，这个选择将来都不会改变。  
- 适用贪心算法解决的问题的两个重要性质：
	- 最优子结构。
	- 贪心选择性质。

#### 实例

##### 背包问题

##### Huffman Coding



### Network Flow

### Linear and Integer Programming


### 回溯法
系统的搜索一个问题的**所有解**或**任一解**。   
回溯法适用于一些组合数较大的问题。   

#### 问题的解空间：   
**定义**解空间：至少包含一个（最优）解。  
**组织**解空间： 一般组织成**树**或**图**。   

#### 回溯法的三个步骤：   
（0）定义问题解空间   
（1）确定易于搜索的解空间结构（组织解空间）   
（2）以深度优先的方式搜索解空间   

#### 回溯法的搜索步骤：   
在一个包含问题所有解的解空间树中，按照深度优先的策略，从根节点出发搜索解空间树。  
算法搜索至解空间树的任一节点时，总是先判断该节点是否肯定不包含问题的解。如果肯定不包含，则跳过对以该节点为根的子树的系统搜索，逐层向其祖先节点回；否则进入该子树，继续按深度优先的策略进行搜索。  
回溯法在用来求问题的所有解时要回溯到根，且根节点的所有子树都已被搜索遍才结束；而用来求问题的任一解时，只要搜索到问题的一个解就可以结束。

#### 回溯法的算法框架：   
递归和非递归两种。   
非递归方式：   


递归方式：   

#### 回溯法的限界函数
- 回溯法的核心及难点。
- 尽可能多和尽可能早地“杀掉”不可能产生最优解的活节点。也就是 剪枝。   



#### 实例
##### 0-1 背包问题


##### n皇后问题


### 分支限界法
类似于回溯法，只不过分支限界法查找的是满足约束条件的一个解，或者是使目标函数达到极值的解，也就是说分支限界法查找的是**最优解**。



### 概率算法
##### 数值概率算法
##### 蒙特卡罗算法
##### 拉斯维加斯算法
##### 舍伍德算法

### 近似算法



## 算法分析

Asymptotic Analysis 渐近分析?

 
**时间复杂度**
定义：
- O() 渐进上界
- Omega() 渐进下界
- Theta() 渐进紧致接

分析方法：
算法分为递归和非递归算法。非递归算法的时间复杂度较容易分析，递归式的算法不容易分析。   
展开法，代替法（猜测，证明，不常用），递归树法，主方法。
refer to 软件设计师教程 9.2



### 证明正确性


### 怎样实现算法（数据结构）


### 最坏运行时间


### 计算复杂度



## 